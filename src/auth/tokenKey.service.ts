import { Injectable, NotFoundException } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { TokenKey, TokenKeyDocument } from './schema/tokenKey.schema';

@Injectable()
export class TokenKeyService {
  constructor(@InjectModel(TokenKey.name) private tokenKeyModel: Model<TokenKeyDocument>) {}

  // üîπ L∆∞u m·ªõi ho·∫∑c c·∫≠p nh·∫≠t kh√≥a RSA v√† Refresh Token
  async saveOrUpdateKeyPair(userId: string, publicKey: string, privateKey: string, refreshToken: string) {
    const keyStore = await this.tokenKeyModel.findOneAndUpdate(
      { userId },
      { publicKey, privateKey, refreshToken },
      { new: true, upsert: true } // T·ª± ƒë·ªông t·∫°o m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
    );

    return { message: 'L∆∞u ho·∫∑c c·∫≠p nh·∫≠t kh√≥a th√†nh c√¥ng', keyStore };
  }

  // üîπ T√¨m kh√≥a c·ªßa m·ªôt ng∆∞·ªùi d√πng
  async findKeyByUserId(userId: string) {
    const keyStore = await this.tokenKeyModel.findOne({ userId });
    if (!keyStore) throw new NotFoundException('Kh√¥ng t√¨m th·∫•y kh√≥a RSA');
    return keyStore;
  }

  // üîπ L·∫•y Private Key
  async getPrivateKey(userId: string) {
    return (await this.findKeyByUserId(userId)).privateKey;
  }

  // üîπ L·∫•y Public Key
  async getPublicKey(userId: string) {
    return (await this.findKeyByUserId(userId)).publicKey;
  }

  // üîπ Ki·ªÉm tra Refresh Token c√≥ h·ª£p l·ªá kh√¥ng
  async validateRefreshToken(userId: string, refreshToken: string) {
    const keyStore = await this.findKeyByUserId(userId);
    if (keyStore.refreshToken !== refreshToken) {
      throw new NotFoundException('Refresh Token kh√¥ng h·ª£p l·ªá');
    }
    return true;
  }

  // üîπ X√≥a kh√≥a khi user ƒëƒÉng xu·∫•t ho·∫∑c b·ªã thu h·ªìi token
  async removeKey(userId: string) {
    const result = await this.tokenKeyModel.deleteOne({ userId });
    if (result.deletedCount === 0) {
      throw new NotFoundException('Kh√¥ng t√¨m th·∫•y kh√≥a ƒë·ªÉ x√≥a');
    }
    return { message: 'X√≥a kh√≥a th√†nh c√¥ng' };
  }
}